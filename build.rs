extern crate bindgen;

fn main() {
    build_bcc_bindings();
}

const WHITELIST_FUNCTION: &'static [&'static str] = &[
    "bpf_create_map",
    "bcc_update_elem",
    "bpf_lookup_elem",
    "bpf_delete_elem",
    "bpf_get_first_key",
    "bpf_get_next_key",
    "bpf_prog_load",
    "bpf_attach_socket",
    "bpf_open_raw_sock",
    "bpf_attach_kprobe",
    "bpf_detach_kprobe",
    "bpf_attach_uprobe",
    "bpf_detach_uprobe",
    "bpf_attach_tracepoint",
    "bpf_detach_tracepoint",
    "bpf_open_perf_buffer",
    "bpf_attach_xdp",
    "bpf_attach_perf_event",
    "bpf_open_perf_event",
    "bpf_close_perf_event_fd",
    "bpf_obj_pin",
    "bpf_obj_get",
    "bpf_obj_get_info",
    "bpf_prog_compute_tag",
    "bpf_prog_get_tag",
    "bpf_module_create_b",
    "bpf_module_create_c",
    "bpf_module_create_c_from_string",
    "bpf_module_destroy",
    "bpf_module_license",
    "bpf_module_kern_version",
    "bpf_num_functions",
    "bpf_function_name",
    "bpf_function_start_id",
    "bpf_function_start",
    "bpf_function_size_id",
    "bpf_function_size",
    "bpf_num_tables",
    "bpf_table_id",
    "bpf_table_fd",
    "bpf_table_fd_id",
    "bpf_table_type",
    "bpf_table_type_id",
    "bpf_table_max_entries",
    "bpf_table_max_entries_id",
    "bpf_table_flags",
    "bpf_table_flags_id",
    "bpf_table_name",
    "bpf_table_key_desc",
    "bpf_table_key_desc_id",
    "bpf_table_leaf_desc",
    "bpf_table_leaf_desc_id",
    "bpf_table_key_size",
    "bpf_table_key_size_id",
    "bpf_table_leaf_size",
    "bpf_table_leaf_size_id",
    "bpf_table_key_snprintf",
    "bpf_table_leaf_snprintf",
    "bpf_table_key_sscanf",
    "bpf_table_leaf_sscanf",
    "bcc_symcache_new",
    "bcc_free_symcache",
    "bcc_symbol_free_demangle_name",
    "bcc_symcache_resolve",
    "bcc_symcache_resolve_no_demangle",
    "bcc_symcache_resolve_name",
    "bcc_symcache_refresh",
    "bcc_resolve_global_addr",
    "bcc_foreach_function_symbol",
    "bcc_resolve_symname",
    "perf_reader_new",
    "perf_reader_free",
    "perf_reader_mmap",
    "perf_reader_event_read",
    "perf_reader_poll",
    "perf_reader_fd",
    "perf_reader_set_fd",
];

const WHITELIST_TYPES: &'static [&'static str] = &[
    "bpf_probe_attach_type",
    "bcc_symbol",
    "perf_reader",
    "bpf_lpm_trie_key",
    "bpf_cmd",
    "bpf_attach_type",
    "bpf_map_type",
    "bpf_prog_type",
    "bpf_attr",
    "bpf_func_id",
    "bpf_adj_room_mode",
    "__sk_buff",
    "bpf_tunnel_key",
    "bpf_ret_code",
    "bpf_sock",
    "xdp_action",
    "xdp_md",
    "sk_action",
    "bpf_prog_info",
    "bpf_map_info",
    "bpf_sock_ops",
    "bpf_perf_event_value",
];

const WHITELIST_VARS: &'static [&'static str] = &[
    "LOG_BUF_SIZE",
    "BPF_FN_PREFIX",
    "BPF_CLASS",
    "BPF_LD",
    "BPF_LDX",
    "BPF_ST",
    "BPF_STX",
    "BPF_ALU",
    "BPF_JMP",
    "BPF_RET",
    "BPF_MISC",
    "BPF_SIZE",
    "BPF_W",
    "BPF_H",
    "BPF_B",
    "BPF_MODE",
    "BPF_IMM",
    "BPF_ABS",
    "BPF_IND",
    "BPF_MEM",
    "BPF_LEN",
    "BPF_MSH",
    "BPF_OP",
    "BPF_ADD",
    "BPF_SUB",
    "BPF_MUL",
    "BPF_DIV",
    "BPF_OR",
    "BPF_AND",
    "BPF_LSH",
    "BPF_RSH",
    "BPF_NEG",
    "BPF_MOD",
    "BPF_XOR",
    "BPF_JA",
    "BPF_JEQ",
    "BPF_JGT",
    "BPF_JGE",
    "BPF_JSET",
    "BPF_SRC",
    "BPF_K",
    "BPF_X",
    "BPF_MAXINSNS",
    "BPF_ALU64",
    "BPF_DW",
    "BPF_XADD",
    "BPF_MOV",
    "BPF_ARSH",
    "BPF_END",
    "BPF_TO_LE",
    "BPF_TO_BE",
    "BPF_FROM_LE",
    "BPF_FROM_BE",
    "BPF_JNE",
    "BPF_JLT",
    "BPF_JLE",
    "BPF_JSGT",
    "BPF_JSGE",
    "BPF_JSLT",
    "BPF_JSLE",
    "BPF_CALL",
    "BPF_EXIT",
    "MAX_BPF_REG",
    "MAX_BPF_ATTACH_TYPE",
    "BPF_F_ALLOW_OVERRIDE",
    "BPF_F_ALLOW_MULTI",
    "BPF_F_STRICT_ALIGNMENT",
    "BPF_PSEUDO_MAP_FD",
    "BPF_ANY",
    "BPF_NOEXIST",
    "BPF_EXIST",
    "BPF_F_NO_PREALLOC",
    "BPF_F_NO_COMMON_LRU",
    "BPF_F_NUMA_NODE",
    "BPF_F_QUERY_EFFECTIVE",
    "BPF_OBJ_NAME_LEN",
    "__BPF_FUNC_MAPPER",
    "__BPF_ENUM_FN",
    "BPF_F_RECOMPUTE_CSUM",
    "BPF_F_INVALIDATE_HASH",
    "BPF_F_HDR_FIELD_MASK",
    "BPF_F_PSEUDO_HDR",
    "BPF_F_MARK_MANGLED_0",
    "BPF_F_MARK_ENFORCE",
    "BPF_F_INGRESS",
    "BPF_F_TUNINFO_IPV6",
    "BPF_F_SKIP_FIELD_MASK",
    "BPF_F_USER_STACK",
    "BPF_F_FAST_STACK_CMP",
    "BPF_F_REUSE_STACKID",
    "BPF_F_ZERO_CSUM_TX",
    "BPF_F_DONT_FRAGMENT",
    "BPF_F_INDEX_MASK",
    "BPF_F_CURRENT_CPU",
    "BPF_F_CTXLEN_MASK",
    "XDP_PACKET_HEADROOM",
    "BPF_TAG_SIZE",
    "TCP_BPF_IW",
    "TCP_BPF_SNDCWND_CLAMP",
    "BPF_ALU64_REG",
    "BPF_ALU32_REG",
    "BPF_ALU64_IMM",
    "BPF_ALU32_IMM",
    "BPF_MOV64_REG",
    "BPF_MOV64_IMM",
    "BPF_LD_IMM64",
    "BPF_LD_IMM64_RAW",
    "BPF_PSEUDO_MAP_FD",
    "BPF_LD_MAP_FD",
    "BPF_LD_ABS",
    "BPF_LDX_MEM",
    "BPF_STX_MEM",
    "BPF_ST_MEM",
    "BPF_JMP_REG",
    "BPF_JMP_IMM",
    "BPF_RAW_INSN",
    "BPF_EXIT_INSN",
    "STT_GNU_IFUNC",
];

fn build_bcc_bindings() {
    let mut bindings = bindgen::Builder::default()
        .header("wrapper.h");

    for func in WHITELIST_FUNCTION {
        bindings = bindings.whitelisted_function(func);
    }

    for ty in WHITELIST_TYPES {
        bindings = bindings.whitelisted_type(ty);
    }

    for var in WHITELIST_VARS {
        bindings = bindings.whitelisted_var(var);
    }

    bindings = bindings.derive_debug(true)
        .impl_debug(true)
        .derive_default(true);

    let builder = bindings.generate()
        .expect("Should generate BCC API bindings OK");

    builder
        .write_to_file("src/bccapi.rs")
        .expect("Couldn't write bcc bindings!");
}
